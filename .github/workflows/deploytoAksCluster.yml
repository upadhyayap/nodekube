on:
  push:
    branches:
      - master

env:
  RESOURCEGROUPNAME: "kubenodespike-rg"
  LOCATION: "South Central US"
  HOSTINGPLANNAME: "kubenodespike-plan"
  APPINSIGHTLOCATION: "South Central US"
  SKU: "Standard" 

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@master
    
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # Deploy Arm template
    - name: create ACR
      uses: azure/CLI@v1
      continue-on-error: false
      with:
        inlineScript: |
          az group create --name "${{ env.RESOURCEGROUPNAME }}" --location "${{ env.LOCATION }}"
          az deployment group create --resource-group "${{ env.RESOURCEGROUPNAME }}" --template-file ./ArmTemplates/containerRegistry-template.json --parameters registryName="kubenodespike" registryLocation="${{ env.APPINSIGHTLOCATION }}" registrySku="${{ env.SKU }}"
    
    

    - name: ACR credentials
      id: create-acr
      continue-on-error: false
      run: |
        echo "::set-output name=acr_username::`az acr credential show -n kubenodespike --query username | xargs`"
        echo "::set-output name=acr_password::`az acr credential show -n kubenodespike --query passwords[0].value | xargs`"
        echo "::add-mask::`az acr credential show -n kubenodespike --query passwords[0].value | xargs`"

    - uses: azure/docker-login@v1
      continue-on-error: false
      with:
        login-server: kubenodespike.azurecr.io
        username: ${{ steps.create-acr.outputs.acr_username }}
        password: ${{ steps.create-acr.outputs.acr_password }}

    - name: Build and push image to ACR
      id: build-image
      continue-on-error: false
      run: |
        docker build "$GITHUB_WORKSPACE/Application" -f  "Application/Dockerfile" -t kubenodespike.azurecr.io/kubenodespike:${{ github.sha }}
        docker push kubenodespike.azurecr.io/kubenodespike:${{ github.sha }}
    
    - uses: azure/k8s-set-context@v1
      id: login
      with:
         kubeconfig: ${{ secrets.aks_aksnettagtest1_kubeConfig }}
    
    - name: Create namespace
      run: |
        namespacePresent=`kubectl get namespace | grep aksnettagtest1ea00 | wc -l`
        if [ $namespacePresent -eq 0 ]
        then
            echo `kubectl create namespace aksnettagtest1ea00`
        fi

    - uses: azure/k8s-create-secret@v1
      with:
        namespace: aksnettagtest1ea00
        container-registry-url: nodkubeacr.azurecr.io
        container-registry-username: ${{ steps.create-acr.outputs.acr_username }}
        container-registry-password: ${{ steps.create-acr.outputs.acr_password }}
        secret-name: aksnettagtesdockerauth
       
    - uses: azure/k8s-deploy@v1
      with:
        namespace: aksnettagtest1ea00
        manifests: |
          manifests/deployment.yml
          manifests/service.yml
        images: |
          nodkubeacr.azurecr.io/aksnettagtest1:${{ github.sha }}
        imagepullsecrets: |
          aksnettagtesdockerauth
